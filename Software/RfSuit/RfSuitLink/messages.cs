// This file is auto generated by the Message Builder.
// Don't bother making changes to this file as they will be lost when recompiling.

// Message Builder by Claus Andersen.

using System;

using System.Reflection;

namespace RfSuit
{
	class MessageDispatcher
	{
		interface IMessageHandler
		{
			void Handle(Byte[] frame);
		}

		public delegate void MessageHandlerDelegate<T>(T message);
		
		class MessageHandler<T> : IMessageHandler where T : class
		{
			MessageHandlerDelegate<T> handler;
			ConstructorInfo constructor;

			public MessageHandler(MessageHandlerDelegate<T> handler)
			{
				this.handler = handler;
				constructor = typeof(T).GetConstructor(new Type[] { typeof(Byte[]) });
			}

			public void Handle(Byte[] frame)
			{
				var msg = constructor.Invoke(new object[] { frame }) as T;
				handler(msg);
			}
		}

		IMessageHandler[] handlers = new IMessageHandler[256];
	
		public delegate bool MessagePredicateDelegate(Byte destination, Byte source);
		public event MessagePredicateDelegate MessagePredicate;

		public void HandleFrame(byte[] frame)
		{
			Byte destination = frame[0];
			Byte source = frame[1];
			Byte messageId = frame[2];

			if (MessagePredicate == null || MessagePredicate(destination, source))
			{
				var handler = handlers[messageId];
				if (handler != null)
				{
					handler.Handle(frame);
				}
			}
		}

		public void AddHandler<T>(MessageHandlerDelegate<T> handler) where T : class
		{
			dynamic id = typeof(T).GetField("MessageId", BindingFlags.NonPublic | BindingFlags.Static).GetValue(null);

			handlers[id] = new MessageHandler<T>(handler);
		}
	}

	class PingRequestMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 0;

		public PingRequestMessage()
		{ }

		public PingRequestMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class PingReplyMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 1;

		public PingReplyMessage()
		{ }

		public PingReplyMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class NothingTokenMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 2;

		public NothingTokenMessage()
		{ }

		public NothingTokenMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class SetTxPowerTokenMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 3;
		public Byte TxPower;

		public SetTxPowerTokenMessage()
		{ }

		public SetTxPowerTokenMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			TxPower = frame[3];
		}

		static public Byte[] Create(Byte destination, Byte source, Byte txPower)
		{
			Byte[] buffer = new Byte[4];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = txPower;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, TxPower);
		}
	}

	class EnableSweepingTokenMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 4;

		public EnableSweepingTokenMessage()
		{ }

		public EnableSweepingTokenMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class DisableSweepingTokenMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 5;

		public DisableSweepingTokenMessage()
		{ }

		public DisableSweepingTokenMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class ReportTokenMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 6;
		public Byte[] Rssis = new Byte[16];

		public ReportTokenMessage()
		{ }

		public ReportTokenMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Array.Copy(frame, 3, Rssis, 0, 16);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte[] rssis)
		{
			Byte[] buffer = new Byte[19];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			Array.Copy(rssis, 0, buffer, 3, 16);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Rssis);
		}
	}

}
