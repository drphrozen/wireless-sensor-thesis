// This file is auto generated by the Message Builder.
// Don't bother making changes to this file as they will be lost when recompiling.

// Message Builder by Claus Andersen.

using System;

using System.Reflection;

namespace NodeInspector
{
	class MessageDispatcher
	{
		interface IMessageHandler
		{
			void Handle(Byte[] frame);
		}

		public delegate void MessageHandlerDelegate<T>(T message);
		
		class MessageHandler<T> : IMessageHandler where T : class
		{
			MessageHandlerDelegate<T> handler;
			ConstructorInfo constructor;

			public MessageHandler(MessageHandlerDelegate<T> handler)
			{
				this.handler = handler;
				constructor = typeof(T).GetConstructor(new Type[] { typeof(Byte[]) });
			}

			public void Handle(Byte[] frame)
			{
				var msg = constructor.Invoke(new object[] { frame }) as T;
				handler(msg);
			}
		}

		IMessageHandler[] handlers = new IMessageHandler[256];
	
		public delegate bool MessagePredicateDelegate(Byte destination, Byte source);
		public event MessagePredicateDelegate MessagePredicate;

		public void HandleFrame(byte[] frame)
		{
			Byte destination = frame[0];
			Byte source = frame[1];
			Byte messageId = frame[2];

			if (MessagePredicate == null || MessagePredicate(destination, source))
			{
				var handler = handlers[messageId];
				if (handler != null)
				{
					handler.Handle(frame);
				}
			}
		}

		public void AddHandler<T>(MessageHandlerDelegate<T> handler) where T : class
		{
			dynamic id = typeof(T).GetField("MessageId", BindingFlags.NonPublic | BindingFlags.Static).GetValue(null);

			handlers[id] = new MessageHandler<T>(handler);
		}
	}

	class PingRequestMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 0;

		public PingRequestMessage()
		{ }

		public PingRequestMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class PingReplyMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 1;

		public PingReplyMessage()
		{ }

		public PingReplyMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class ConfigureReportingMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 2;
		public Byte EnableFrames;
		public Byte EnableMessages;
		public Byte EnableWarnings;
		public Byte EnableErrors;
		public Byte EnableApplicationLevel;
		public Byte EnableFrameworkLevel;

		public ConfigureReportingMessage()
		{ }

		public ConfigureReportingMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			EnableFrames = (Byte)(frame[3] & 0x1);
			EnableMessages = (Byte)((frame[3] >> 1) & 0x1);
			EnableWarnings = (Byte)((frame[3] >> 2) & 0x1);
			EnableErrors = (Byte)((frame[3] >> 3) & 0x1);
			EnableApplicationLevel = (Byte)((frame[3] >> 4) & 0x1);
			EnableFrameworkLevel = (Byte)((frame[3] >> 5) & 0x1);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte enableFrames, Byte enableMessages, Byte enableWarnings, Byte enableErrors, Byte enableApplicationLevel, Byte enableFrameworkLevel)
		{
			if ((enableFrames & 0x1) != enableFrames)
			{
				throw new ArgumentOutOfRangeException("Argument enableFrames is out of range.");
			}
			
			if ((enableMessages & 0x1) != enableMessages)
			{
				throw new ArgumentOutOfRangeException("Argument enableMessages is out of range.");
			}
			
			if ((enableWarnings & 0x1) != enableWarnings)
			{
				throw new ArgumentOutOfRangeException("Argument enableWarnings is out of range.");
			}
			
			if ((enableErrors & 0x1) != enableErrors)
			{
				throw new ArgumentOutOfRangeException("Argument enableErrors is out of range.");
			}
			
			if ((enableApplicationLevel & 0x1) != enableApplicationLevel)
			{
				throw new ArgumentOutOfRangeException("Argument enableApplicationLevel is out of range.");
			}
			
			if ((enableFrameworkLevel & 0x1) != enableFrameworkLevel)
			{
				throw new ArgumentOutOfRangeException("Argument enableFrameworkLevel is out of range.");
			}
			
			Byte[] buffer = new Byte[4];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = (Byte)((enableFrameworkLevel << 5) | (enableApplicationLevel << 4) | (enableErrors << 3) | (enableWarnings << 2) | (enableMessages << 1) | (enableFrames << 0));
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, EnableFrames, EnableMessages, EnableWarnings, EnableErrors, EnableApplicationLevel, EnableFrameworkLevel);
		}
	}

	class ReportFrameMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 3;
		public Byte From;
		public Byte To;
		public Byte[] Payload = new Byte[32];

		public ReportFrameMessage()
		{ }

		public ReportFrameMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			From = frame[3];
			To = frame[4];
			Array.Copy(frame, 5, Payload, 0, 32);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte from, Byte to, Byte[] payload)
		{
			Byte[] buffer = new Byte[37];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = from;
			buffer[4] = to;
			Array.Copy(payload, 0, buffer, 5, 32);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, From, To, Payload);
		}
	}

	class ReportApplicationMessageMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 4;
		public Byte[] Message = new Byte[30];

		public ReportApplicationMessageMessage()
		{ }

		public ReportApplicationMessageMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Array.Copy(frame, 3, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte[] message)
		{
			Byte[] buffer = new Byte[33];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			Array.Copy(message, 0, buffer, 3, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Message);
		}
	}

	class ReportApplicationWarningMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 5;
		public Byte[] Message = new Byte[30];

		public ReportApplicationWarningMessage()
		{ }

		public ReportApplicationWarningMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Array.Copy(frame, 3, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte[] message)
		{
			Byte[] buffer = new Byte[33];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			Array.Copy(message, 0, buffer, 3, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Message);
		}
	}

	class ReportApplicationErrorMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 6;
		public Byte[] Message = new Byte[30];

		public ReportApplicationErrorMessage()
		{ }

		public ReportApplicationErrorMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Array.Copy(frame, 3, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte[] message)
		{
			Byte[] buffer = new Byte[33];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			Array.Copy(message, 0, buffer, 3, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Message);
		}
	}

	class ReportFrameworkMessageMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 7;
		public Byte[] Message = new Byte[30];

		public ReportFrameworkMessageMessage()
		{ }

		public ReportFrameworkMessageMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Array.Copy(frame, 3, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte[] message)
		{
			Byte[] buffer = new Byte[33];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			Array.Copy(message, 0, buffer, 3, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Message);
		}
	}

	class ReportFrameworkWarningMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 8;
		public Byte[] Message = new Byte[30];

		public ReportFrameworkWarningMessage()
		{ }

		public ReportFrameworkWarningMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Array.Copy(frame, 3, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte[] message)
		{
			Byte[] buffer = new Byte[33];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			Array.Copy(message, 0, buffer, 3, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Message);
		}
	}

	class ReportFrameworkErrorMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 9;
		public Byte[] Message = new Byte[30];

		public ReportFrameworkErrorMessage()
		{ }

		public ReportFrameworkErrorMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Array.Copy(frame, 3, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte[] message)
		{
			Byte[] buffer = new Byte[33];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			Array.Copy(message, 0, buffer, 3, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Message);
		}
	}

	class ReportMessagesDroppedMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 10;
		public Byte FramesDropped;
		public Byte LogsDropped;

		public ReportMessagesDroppedMessage()
		{ }

		public ReportMessagesDroppedMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			FramesDropped = frame[3];
			LogsDropped = frame[4];
		}

		static public Byte[] Create(Byte destination, Byte source, Byte framesDropped, Byte logsDropped)
		{
			Byte[] buffer = new Byte[5];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = framesDropped;
			buffer[4] = logsDropped;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, FramesDropped, LogsDropped);
		}
	}

}
