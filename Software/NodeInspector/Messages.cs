// This file is auto generated by the Message Builder.
// Don't bother making changes to this file as they will be lost when recompiling.

// Message Builder by Claus Andersen.

using System;

using System.Reflection;

namespace NodeInspector
{
	class MessageDispatcher
	{
		interface IMessageHandler
		{
			void Handle(Byte[] frame);
		}

		public delegate void MessageHandlerDelegate<T>(T message);
		
		class MessageHandler<T> : IMessageHandler where T : class
		{
			MessageHandlerDelegate<T> handler;
			ConstructorInfo constructor;

			public MessageHandler(MessageHandlerDelegate<T> handler)
			{
				this.handler = handler;
				constructor = typeof(T).GetConstructor(new Type[] { typeof(Byte[]) });
			}

			public void Handle(Byte[] frame)
			{
				var msg = constructor.Invoke(new object[] { frame }) as T;
				handler(msg);
			}
		}

		IMessageHandler[] handlers = new IMessageHandler[256];
	
		public delegate bool MessagePredicateDelegate(Byte destination, Byte source);
		public event MessagePredicateDelegate MessagePredicate;

		public void HandleFrame(byte[] frame)
		{
			Byte destination = frame[0];
			Byte source = frame[1];
			Byte messageId = frame[2];

			if (MessagePredicate == null || MessagePredicate(destination, source))
			{
				var handler = handlers[messageId];
				if (handler != null)
				{
					handler.Handle(frame);
				}
			}
		}

		public void AddHandler<T>(MessageHandlerDelegate<T> handler) where T : class
		{
			dynamic id = typeof(T).GetField("MessageId", BindingFlags.NonPublic | BindingFlags.Static).GetValue(null);

			handlers[id] = new MessageHandler<T>(handler);
		}
	}

	class PingRequestMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 0;

		public PingRequestMessage()
		{ }

		public PingRequestMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class PingReplyMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 1;

		public PingReplyMessage()
		{ }

		public PingReplyMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
		}

		static public Byte[] Create(Byte destination, Byte source)
		{
			Byte[] buffer = new Byte[3];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source);
		}
	}

	class SetLogMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 2;
		public Byte Enable;

		public SetLogMessage()
		{ }

		public SetLogMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Enable = (Byte)(frame[3] & 0x1);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte enable)
		{
			if ((enable & 0x1) != enable)
			{
				throw new ArgumentOutOfRangeException("Argument enable is out of range.");
			}
			
			Byte[] buffer = new Byte[4];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = (Byte)((enable << 0));
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Enable);
		}
	}

	class ReportLogMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 3;
		public Byte Level;
		public Byte[] Message = new Byte[30];

		public ReportLogMessage()
		{ }

		public ReportLogMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Level = frame[3];
			Array.Copy(frame, 4, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte level, Byte[] message)
		{
			Byte[] buffer = new Byte[34];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = level;
			Array.Copy(message, 0, buffer, 4, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Level, Message);
		}
	}

	class SetErrorMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 4;
		public Byte Enable;

		public SetErrorMessage()
		{ }

		public SetErrorMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Enable = (Byte)(frame[3] & 0x1);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte enable)
		{
			if ((enable & 0x1) != enable)
			{
				throw new ArgumentOutOfRangeException("Argument enable is out of range.");
			}
			
			Byte[] buffer = new Byte[4];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = (Byte)((enable << 0));
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Enable);
		}
	}

	class ReportErrorMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 5;
		public Byte Level;
		public Byte[] Message = new Byte[30];

		public ReportErrorMessage()
		{ }

		public ReportErrorMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Level = frame[3];
			Array.Copy(frame, 4, Message, 0, 30);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte level, Byte[] message)
		{
			Byte[] buffer = new Byte[34];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = level;
			Array.Copy(message, 0, buffer, 4, 30);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Level, Message);
		}
	}

	class SetFrameMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 6;
		public Byte Enable;

		public SetFrameMessage()
		{ }

		public SetFrameMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			Enable = (Byte)(frame[3] & 0x1);
		}

		static public Byte[] Create(Byte destination, Byte source, Byte enable)
		{
			if ((enable & 0x1) != enable)
			{
				throw new ArgumentOutOfRangeException("Argument enable is out of range.");
			}
			
			Byte[] buffer = new Byte[4];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = (Byte)((enable << 0));
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Enable);
		}
	}

	class ReportFrameMessage
	{
		public Byte Destination;
		public Byte Source;
		static readonly Byte MessageId = 7;
		public UInt32 Number;
		public UInt32 Time;
		public Byte From;
		public Byte To;
		public Byte[] Payload = new Byte[32];

		public ReportFrameMessage()
		{ }

		public ReportFrameMessage(Byte[] frame)
		{
			Destination = frame[0];
			Source = frame[1];
			UInt32 _t0 = (UInt32)((UInt32)frame[6] << 24 | (UInt32)frame[5] << 16 | (UInt32)frame[4] << 8 | (UInt32)frame[3]);
			Number = _t0;
			UInt32 _t1 = (UInt32)((UInt32)frame[10] << 24 | (UInt32)frame[9] << 16 | (UInt32)frame[8] << 8 | (UInt32)frame[7]);
			Time = _t1;
			From = frame[11];
			To = frame[12];
			Array.Copy(frame, 13, Payload, 0, 32);
		}

		static public Byte[] Create(Byte destination, Byte source, UInt32 number, UInt32 time, Byte from, Byte to, Byte[] payload)
		{
			Byte[] buffer = new Byte[45];
			buffer[0] = destination;
			buffer[1] = source;
			buffer[2] = MessageId;
			buffer[3] = (Byte)number;
			buffer[4] = (Byte)(number >> 8);
			buffer[5] = (Byte)(number >> 16);
			buffer[6] = (Byte)(number >> 24);
			buffer[7] = (Byte)time;
			buffer[8] = (Byte)(time >> 8);
			buffer[9] = (Byte)(time >> 16);
			buffer[10] = (Byte)(time >> 24);
			buffer[11] = from;
			buffer[12] = to;
			Array.Copy(payload, 0, buffer, 13, 32);
			return buffer;
		}

		public Byte[] Create()
		{
			return Create(Destination, Source, Number, Time, From, To, Payload);
		}
	}

}
